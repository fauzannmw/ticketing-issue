// @/prisma/schema.prisma
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
    id            String    @id @default(cuid())
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String    @unique @map(name: "user_id")
    email         String    @unique
    emailVerified DateTime? @map("email_verified")
    passwordHash  String
    sessions      Session[]

    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    account      Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId    String   @map("account_id")
    expireAt     DateTime @map("expire_at")
    ipAddress    String?
    userAgent    String?

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expireAt   DateTime @map("expire_at")

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model User {
    id         String    @id @default(cuid())
    name       String
    division   Division? @relation(fields: [divisionId], references: [id])
    divisionId Int?      @map(name: "division_id")
    account    Account?  @relation
    tickets    Ticket[]
    createdAt  DateTime  @default(now()) @map(name: "created_at")
    updatedAt  DateTime  @updatedAt @map(name: "updated_at")

    @@map(name: "users")
}

model Division {
    id      Int      @id @default(autoincrement())
    name    String
    users   User[]
    tickets Ticket[]

    @@map(name: "divisions")
}

model Ticket {
    id          String    @id @default(cuid())
    issue       String
    description String
    status      Status
    priority    Priority
    dueDate     DateTime?
    author      User?     @relation(fields: [authorId], references: [id])
    authorId    String?   @map(name: "author_id")
    division    Division? @relation(fields: [divisionId], references: [id])
    divisionId  Int?      @map(name: "division_id")
    createdAt   DateTime  @default(now()) @map(name: "created_at")
    updatedAt   DateTime  @updatedAt @map(name: "updated_at")

    @@map(name: "tickets")
}

enum Status {
    backlog
    in_progress
    complete
}

enum Priority {
    low
    medium
    high
}
